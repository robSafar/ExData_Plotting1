library(httr)
library("httr")
install.packages(c("cluster", "codetools", "foreign", "lattice", "Matrix", "mgcv", "survival"), lib="/usr/local/Cellar/r/3.3.1_3/R.framework/Versions/3.3/Resources/library")
install.packages("swirl")
install.packages("httr")
install.packages("openssl")
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- spally(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
q()
library("swirl", lib.loc="/usr/local/lib/R/3.3/site-library")
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
data("iris")
?iris
data("iris")
data(iris)
?iris
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
apply(mtcars,2,mean)
mean(mtcars$mpg,mtcars$cyl)
View(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
cyl_hp <- tapply(mtcars$hp, mtcars$cyl, mean)
class(cyl_hp)
cyl_hp <- as.vector(tapply(mtcars$hp, mtcars$cyl, mean))
diff(cyl_hp$["4"],cly_hp["8"])
cyl_hp["4"] - cly_hp["8"]
cyl_hp["4"] - cyl_hp["8"]
four <- cyl_hp["4"]
rm(four)
cyl_hp[1] - cyl_hp[3]
cyl_hp[3] - cyl_hp[1]
q()
swirl()
library(swirl)
swirl()
?read.csv
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.1", country == "IN")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
isn.na(c(3,5,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size = 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
:q
quit
q
q:
!
]
:quit
!quit
quit
quit()
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
!group_by()
!group_by
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
source('/var/folders/nc/6tc5s0212r98vrv1j51rsk5w0000gn/T//RtmpgphucE/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count()))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
source('/var/folders/nc/6tc5s0212r98vrv1j51rsk5w0000gn/T//RtmpgphucE/chain1.R')
submit()
source('/var/folders/nc/6tc5s0212r98vrv1j51rsk5w0000gn/T//RtmpgphucE/chain2.R')
submit()
source('/var/folders/nc/6tc5s0212r98vrv1j51rsk5w0000gn/T//RtmpgphucE/chain3.R')
submit()
source('/var/folders/nc/6tc5s0212r98vrv1j51rsk5w0000gn/T//RtmpgphucE/chain4.R')
submit()
quit()
,library(swirl)
library(swirl)
swirl()
library(tidyr)
?htmlparse
??htmlparse
?htmlParse
htmlParse
xmlParse
library("httr", lib.loc="/usr/local/lib/R/3.3/site-library")
htmlParse
xmlParse
?htmlParse
?xmlParse
htmlTreeParse
xmlTreeParse
?xmlTreeParse
swirl()
library(swirl)
swirl()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time
)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 && r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(3,5,NA,10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(R.version))
filter(cran,!is.na(r_version))
cran2 <- select(size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
q()
rawData <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
setwd("~/Repositories/ExData_Plotting1")
rawData <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
View(rawData)
rawData$Date <- as.Date(rawData$Date)
str(rawData)
rawData <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
test <- rawData$Date
?as.Date
test2 <- as.Date(test, format="%d/%m/%Y")
str(test2)
rawData$Date <- as.Date(rawData$Date, format="%d/%m/%Y")
str(rawData)
rm(test)
rm(test2)
?subset
test <- subset(rawData, Date >= "2007-02-01" && Date <= "2007-02-02")
test <- subset(rawData, Date >= "2007-02-01")
test <- subset(rawData, Date >= "2007-02-01" & Date <= "2007-02-02")
View(test)
rm(test)
rawData <- subset(rawData, Date >= "2007-02-01" & Date <= "2007-02-02")
head(rawData)
tail(rawData)
View(rawData)
?strptime
strptime(rawData[Time,1])
strptime(rawData[1,Time])
rawData[Time][[1]]
rawData$Time[1]
rawData$Time[[1]
]
rawData$Time[[1]]
strptime(rawData$Time[1])
strptime(rawData$Time[1], format="%H:%M:%S")
test <- strptime(rawData$Time, format="%H:%M:%S")
source('~/Repositories/ExData_Plotting1/dataPrep.R')
View(workingData)
str(workingData)
test <- workingData$Date + workingData$Time
source('~/Repositories/ExData_Plotting1/dataPrep.R')
View(rawData)
rawData <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
View(rawData)
dataToUse <- rawData[rawData$Date >= "01/02/2007" & rawData$Date <= "02/02/2007", ]
source('~/Repositories/ExData_Plotting1/dataPrep.R')
test <- as.character(workingData$Date) + workingData$Time
test <- as.character(workingData$Date) + as.character(workingData$Time)
test <- c(as.character(workingData$Date), as.character(workingData$Time))
?cbind
test ,_ rbind(as.character(workingData$Date), as.character(workingData$Time))
test <- rbind(as.character(workingData$Date), as.character(workingData$Time))
View(test)
test <- cbind(as.character(workingData$Date), as.character(workingData$Time))
View(workingData)
test <- paste(as.character(workingData$Date), as.character(workingData$Time), sep=" ")
workingData$Time <- paste(as.character(workingData$Date), as.character(workingData$Time), sep=" ")
View(workingData)
rm(test)
source('~/Repositories/ExData_Plotting1/dataPrep.R')
View(workingData)
source('~/Repositories/ExData_Plotting1/dataPrep.R')
View(workingData)
test <- strptime(workingData$Time, format="%d/%m/%Y %H:%M:%S")
?strptime
test <- strptime(rawData$Time)
test <- strptime(rawData$Time, format="%H:%M:%S")
head(test)
test <- strptime(as.character(rawData$Time), format="%H:%M:%S")
head(test])
head(test)
head(rawData$Time)
source('~/Repositories/ExData_Plotting1/dataPrep.R')
?strftime
?format
test <- strftime(workingData$Time)
test <- strftime(workingData$Time, format="%H:%M:%S")
test <- paste(as.character(workingData$Date), as.character(workingData$Time), sep=" ")
test2 <- strftime(test, format="%d/%m/%Y %H:%M:%S")
source('~/Repositories/ExData_Plotting1/dataPrep.R')
str(workingData)
test <- <- strftime(workingData$Time, format="%d/%m/%Y %H:%M:%S")
test <- strftime(workingData$Time, format="%d/%m/%Y %H:%M:%S")
test <- as.Date(workingData$Time, format="%d/%m/%Y %H:%M:%S")
test <- strptime(workingData$Time, format="%d/%m/%Y %H:%M:%S")
source('~/Repositories/ExData_Plotting1/dataPrep.R')
str(workingData)
source('~/Repositories/ExData_Plotting1/dataPrep.R')
str(workingData)
workingData <- subset(rawData, Date >= "2007-02-01" & Date <= "2007-02-02")
workingData$Time <- paste(as.character(workingData$Date), as.character(workingData$Time), sep=" ")
str(workingData)
workingData <- subset(rawData, Date >= "2007-02-01" & Date <= "2007-02-02")
test <- strftime(paste(as.character(workingData$Date), as.character(workingData$Time), sep=" "), format="%d/%m/%Y %H:%M:%S")
test <- strptime(paste(as.character(workingData$Date), as.character(workingData$Time), sep=" "), format="%d/%m/%Y %H:%M:%S")
View(rawData)
test <- strptime(paste(workingData$Date, as.character(workingData$Time), sep=" "), format="%d/%m/%Y %H:%M:%S")
test <- strftime(paste(workingData$Date, as.character(workingData$Time), sep=" "), format="%d/%m/%Y %H:%M:%S")
?as.Time
?strptime
test2 <- as.POSIXct(test, "%d/%m/%Y %H:%M:%S")
test2 <- as.POSIXlt(test, "%d/%m/%Y %H:%M:%S")
workingData <- subset(rawData, Date >= "2007-02-01" & Date <= "2007-02-02")
rm(test)
rm(test2])
rm(test2)
workingData$Time <- paste(workingData$Date, as.character(workingData$Time), sep=":")
View(workingData)
test <- strftime(workingData$Time, format="%d/%m/%Y:%H:%M:%S")
test <- strptime(workingData$Time, format="%d/%m/%Y:%H:%M:%S")
str(workingData)
workingData$Time <- paste(workingData$Date, as.character(workingData$Time), sep=" ")
test <- strftime(workingData$Time, format="%d-%m-%Y %H:%M:%S")
test <- strptime(workingData$Time, format="%d-%m-%Y %H:%M:%S")
View(workingData)
source('~/Repositories/ExData_Plotting1/dataPrep.R')
View(workingData)
workingData <- subset(rawData, Date >= "2007-02-01" & Date <= "2007-02-02")
workingData$Time <- paste(workingData$Date, as.character(workingData$Time), sep=":")
View(workingData)
test <- strptime(workingData$Time, format="%d-%m-%Y:%H:%M:%S")
View(workingData)
test <- strptime(workingData$Time, format="%Y-%m-%d:%H:%M:%S")
source('~/Repositories/ExData_Plotting1/dataPrep.R')
str(workingData)
source('~/Repositories/ExData_Plotting1/dataPrep.R')
str(workingData)
View(workingData)
plot(workingData$Global_active_power, main="Global Active Power", col="red")
hist(workingData$Global_active_power, main="Global Active Power", col="red")
?rm.na
??rm.na
hist(workingData$Global_active_power, col = "green", breaks = 100)
hist(as.numeric(workingData$Global_active_power), col = "green", breaks = 100)
hist(as.numeric(workingData$Global_active_power), col = "green", breaks = 12)
hist(as.numeric(workingData$Global_active_power), col = "green", breaks = 20)
View(workingData)
str(workingData)
test <- as.numeric(workingData[Global_active_power:Sub_metering_3])
length(workingData[Global_active_power:Sub_metering_3])
length(workingData[[Global_active_power:Sub_metering_3]])
names(workingData)
length(names(workingData))
length(names(workingData))-2
test <- as.numeric(workingData[3])
head(workingData[3])
test <- as.numeric(as.character(workingData[3]))
test <- as.character(workingData[3])
source('~/Repositories/ExData_Plotting1/dataPrep.R')
source('~/Repositories/ExData_Plotting1/dataPrep.R')
str(workingData)
rm(test)
hist(workingData$Global_active_power)
hist(as.numeric(workingData$Global_active_power))
hist(as.numeric(workingData$Global_active_power), col="red")
xlab="Global Active Power (kilowatts)"
rm)xlab
rm(xlab)
hist(as.numeric(workingData$Global_active_power), col="red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
with(workingData, plot(Time ~ Global_active_power))
with(workingData, plot(Time, Global_active_power))
with(workingData, plot(Time, Global_active_power, ylab="Global Active Power (kilowatts"))
with(workingData, plot(Time, Global_active_power, ylab="Global Active Power (kilowatts)", type="l"))
with(workingData, plot(Time, Sub_metering_1, type="n"))
with(workingData, plot(Time, Sub_metering_1, ylab="Energy Sub Metering", type="n"))
with(workingData, plot(Time, Global_active_power, ylab="Global Active Power (kilowatts)", type="l"))
with(workingData, plot(Time, Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type="l"))
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
points(workingData$Sub_metering_1, type="l")
?points
points(workingData$Sub_metering_1, type="l", col="black")
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="blue"))
with(workingData, points(Time, Sub_metering_3, type="l", col="red"))
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="red"))
with(workingData, points(Time, Sub_metering_3, type="l", col="blue"))
legend("topright", col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", pch=c(NA,NA,NA), col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", pch=c(NA,NA,NA), line.col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
?pch
legend("topright", pch=NA, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
legend("topright", pch=NA, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="red"))
with(workingData, points(Time, Sub_metering_3, type="l", col="blue"))
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
par(mfcol = c(2,2))
with(workingData, plot(Time, Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", type="l"))
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="red"))
with(workingData, points(Time, Sub_metering_3, type="l", col="blue"))
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
source('~/Repositories/ExData_Plotting1/plot3.R')
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="red"))
with(workingData, points(Time, Sub_metering_3, type="l", col="blue"))
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="red"))
with(workingData, points(Time, Sub_metering_3, type="l", col="blue"))
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), bty="n")
with(workingData, plot(Time, Voltage, xlab="datetime", ylab="Voltage", type="l"))
with(workingData, plot(Time, Global_reactive_power, xlab="datetime", type="l"))
par(mfcol = c(2,2))
source('plot2.R')
source('plot3.R')
with(workingData, plot(Time, Voltage, xlab="datetime", ylab="Voltage", type="l"))
with(workingData, plot(Time, Global_reactive_power, xlab="datetime", type="l"))
par(mfcol = c(2,2))
with(workingData, plot(Time, Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", type="l"))
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="red"))
with(workingData, points(Time, Sub_metering_3, type="l", col="blue"))
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), bty="n")
with(workingData, plot(Time, Voltage, xlab="datetime", ylab="Voltage", type="l"))
with(workingData, plot(Time, Global_reactive_power, xlab="datetime", type="l"))
?png
png(file="plot1.png", width=480, height=480)
hist(as.numeric(workingData$Global_active_power), col="red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
dev.off()
png(file="plot2.png", width=480, height=480)
with(workingData, plot(Time, Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", type="l"))
dev.off()
png(file="plot3.png", width=480, height=480)
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="red"))
with(workingData, points(Time, Sub_metering_3, type="l", col="blue"))
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
dev.off()
png(file="plot4.png", width=480, height=480)
par(mfcol = c(2,2))
with(workingData, plot(Time, Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", type="l"))
with(workingData, plot(Time, Sub_metering_1, xlab="", ylab="Energy Sub Metering", type="n"))
with(workingData, points(Time, Sub_metering_1, type="l", col="black"))
with(workingData, points(Time, Sub_metering_2, type="l", col="red"))
with(workingData, points(Time, Sub_metering_3, type="l", col="blue"))
legend("topright", lty=1, col=c("black","red","blue"), legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), bty="n")
with(workingData, plot(Time, Voltage, xlab="datetime", ylab="Voltage", type="l"))
with(workingData, plot(Time, Global_reactive_power, xlab="datetime", type="l"))
dev.off()
source('~/Repositories/ExData_Plotting1/plot4.R')
source('~/Repositories/ExData_Plotting1/plot4.R')
source('~/Repositories/ExData_Plotting1/plot4.R')
download.file
?download.file
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", destfile="data.zip")
unzip("data.zip")
